name: ddalkak-docker-compose-dev
version: "3.9"

services:
  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=ddalkak
      - POSTGRES_USER=ddalkak
      - POSTGRES_PASSWORD=ddalkak
  
  redis:
    image: redis:6.0
    restart: always
    ports:
      - "6379:6379"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.23
    container_name: elasticsearch
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - 9300:9300
      - 9200:9200
    environment:
      - node.name=elasticsearch
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=elasticsearch
      - cluster.initial_master_nodes=elasticsearch
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"

  zookeeper-1:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - 32181:32181
    environment:
      ZOOKEEPER_CLIENT_PORT: 32181
      ZOOKEEPER_TICK_TIME: 2000
  kafka-1:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-msa
    ports:
      - 9092:9092
    depends_on:
      - zookeeper-1
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:32181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-1:29092,EXTERNAL://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      #      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_NUM_PARTITIONS: 4

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - 8989:8080
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka-1:29092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper-1:32181

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.23
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - 5601:5601
    depends_on:
      - elasticsearch

  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.23
    container_name: logstash
    command:
      logstash -f /etc/logstash/conf.d/logstash.conf
    volumes:
      - ./docker:/etc/logstash/conf.d
    ports:
      - 5000:5000  
    depends_on:
      - elasticsearch

  eureka-server:
    container_name: eureka-server
    build: eureka-server
    ports:
      - 8761:8761
    networks:
      - spring-network
    depends_on:
      - db
      - redis
      - elasticsearch
      - kibana
      - logstash
  
  config-server:
    container_name: config-server
    build: config-server
    ports:
      - 8888:8888
    networks:
      - spring-network
    depends_on:
      - db
      - redis
      - elasticsearch
      - kibana
      - logstash
      - eureka-server

  gateway-service:
    container_name: gateway-service
    build: gateway-service
    ports:
      - 8000:8000
    networks:
      - spring-network
    depends_on:
      - db
      - redis
      - config-server
      - elasticsearch
      - kibana
      - logstash

  user-service:
    container_name: user-service
    build: user-service
    depends_on:
      - eureka-server
      - gateway-service
      - config-server
      - elasticsearch
      - kibana
      - logstash
    networks:
      - spring-network

  compute-service:
    container_name: compute-service
    build: compute-service
    depends_on:
      - db
      - redis
      - elasticsearch
      - kibana
      - logstash
      - eureka-server
      - gateway-service


  deployment-service:
    container_name: deployment-service
    build: deployment-service
    depends_on:
      - db
      - elasticsearch
      - kibana
      - logstash
      - eureka-server
      - gateway-service

  project-service:
    container_name: project-service
    build: project-service
    depends_on:
      - db
      - redis
      - elasticsearch
      - kibana
      - logstash
      - eureka-server
      - gateway-service

volumes:
  elasticsearch_data: 
  postgres_data:
  
networks:
  spring-network:
